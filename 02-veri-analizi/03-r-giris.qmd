# R ve Rstudio ile çalışma

## Değişken atama

Ancak, bu şekilde yaptığınız işlemler genel olarak uzun ömürlü değildir. R üzerinde genel olarak kullandığımız her şeyi bir değişken içerisinde saklarız. Bunun için atama operatörü `<-` kullanılmaktadır. Bu operatör, aslında okun sağındaki bilgiyi, soldaki değişkenin içerisine atamaktan sorumludur. Örnek olarak aşağıdaki işlemi yapalım:

```{r}
sayi1 <- 12
```

Bu işlemin sonucunda 12 değerini, `sayi1` değişkeni içerisinde atamış oluyoruz. Artık, 12 kullancağımız her yerde `sayi1` değişkenini kullanabiliriz.

İsterseniz ikinci bir değişken atayalım:

```{r}
sayi2 <- 23
```

Artık ikinci bir degisken elde ettik. Peki bunlarla neler yapabiliriz? Mesela dört işlem gerçekleştirebiliriz:

```{r}
sayi1 + sayi2
```

Şu ana kadar sadece sayılarla çalıştık. Ancak R içerisinde daha fazla veri tipi bulunmaktadır.

## Dik bir öğrenme eğrisi

Kullanacağımız programların dik bir öğrenme eğrisi bulunmaktadır. Yani, gerçekten işe yarar bir şeyler yapabilmeniz için bir süre boyunca (3 - 4 hafta kadar) yoğun bir çalışma yapmanız ve kullan programların mantıklarını kavramanız gerekir. 

Ancak bir kere bu çalışma sistemini kavradığınızda, sonraki adımlar daha kolay hale gelecektir.

Mesela @fig-curve-1, anlattıklarımın bir özeti aslında. Biraz gözünüzü korkuttum kabul ediyorum...

![Veri analizi araçlarından R ve Python programlarının öğrenme eğrisi siyah olarak gösterilmiştir.](images/learning-curve-1.png){#fig-curve-1}

Ancak her işe iyi tarafından bakalım. Veri analizi, yoğun bir biçimde döküman formatı değiştirme ve tekrarlı işlemler içeren bir işlemler bütünüdür. Microsoft Excel gibi bir araçlar bu analiz adımlarını ancak belli bir noktaya kadar sürdürebilirsiniz. Özellikle @sec-veri-bilimi-giris'de belirtileceği üzere, yaşam bilimlerindeki veri miktarı artık küçük çapılı araçların altından kalkamayacağı bir seviyeye gelmiş bulunmaktadır. Bir noktadan sonra, tekrarlı işler için harcayacağınız zaman git gide artacaktır (@fig-curve-2).

![Bu grafikte $x$ ekseni yapılan veri analiz işleminin boyutunu, $y$ ekseni ise o işi yapmak için gerekli zamanı göstermektedir. Kırmızı çizgi, R gibi bir programla yapılan veri analzi sürecini ifade ederken, siyah çizgi ise manuel yollarla yapılan bir işlemi göstermektedir. R ile yapılan işlemler belli bir noktaya kadar karmaşık olsa da, işin boyutu arttıkça, harcanan zaman sabit kalmaya başlamıştır.](images/learning-curve-2.png){#fig-curve-2}

## Veri tipleri

R içerisinde dört temel veri tipimiz bulunmaktadır:

+ Sayı (*numeric*, `num`) 
+ Karakter (*character*, `chr`)
+ Mantıksal (*logical*, `logi`)
+ Kategori/faktör (*factor*, `fac`)

Bu veri tiplerinin hepsi, farklı veri analizi adımlarında kullanılmaktadır. Dolayısıyla, bu veri tiplerinin düzgün bir şekilde ayarlandığından emin olmalısınız.

Bir verinin tipini öğrenmek istiyorsanız, basit olarak `str` fonksiyonunu kullanabilirsiniz:

```{r}
str(12)
```

::: note
R üzerindeki fonksiyonlar, belirli işlevleri yerine getiren kod parçaları olarak tanımlanabilir. Her fonskiyonun, parantez içerisine yazılan en az bir tane girdisi bulunmaktadır. Burada kullandığımız `str` fonksiyonu, parantez içerisinde belirtilen verinin tipini geri döndürmekten sorumludur.
:::

Sayılar dışında neler kullanabiliriz? Karakterleri kullanabiliriz. Ancak karakterle çalışmak istiyorsanız, mutlaka tırnak işareti `"` kullanmalısınız:

```{r}
"karakter"
```

Peki bu karakterin tipine bakalım:

```{r}
str("karakter")
```

Mantıksal değişkenler ise *Evet* ya da *Hayır* durumlarını belirleyen operatörler olarak tanımlanabilir. R içerisinde tanımlı olarak gelirler ve dört farklı şekilde ifade edebilirsiniz. Herhangi bir tırnak kullanımına ihtiyaç bulunmamaktadır:

- `TRUE` veya `T`
- `FALSE` veya `F`

Mesela bir tanesinin tipine bakalım:

```{r}
str(TRUE)
```

::: note
Mantıksal operatörler, R içerisinde ön tanımlı olarak gelmektedir. Dolayısıyla, bu operatörleri oldukları gibi kullanabilme imkanınız bulunmaktadır.
:::

Son olarak kategori ya da faktörleri inceleyelim. Faktör değişkenleri, genel olarak gruplandırma vazifesi görmektedir. Mesela, farklı deney koşullarını faktör olarak gösterebiliriz. Bu sayede, R içerisinde bu koşullara arasındaki değişimleri inceleme imkanımız bulunmaktadır. Faktör oluşturmak için mutlaka bir karaktere ihtiyacımız bulunmaktadır. Bir faktör oluşturmak için, `factor` fonksiyonunu kullanmalıyız:


```{r}
factor("karanlik")
```

İsterseniz bir de bu faktörün tipine bakalım:

```{r}
str(factor("karanlik"))
```

