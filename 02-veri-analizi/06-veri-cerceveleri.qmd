# Veri Çerçeveleri {#sec-veri-cerceveleri}

Bir önceki derste matrisleri inceledik. Matrisler, tek bir veri tipine sahip iki boyutlu yapılardı. Ancak, vektrler bölümünde (@sec-vektorler), farklı veri tiplerini kullanmıştık. Yani, gerçek bir veri analizi senaryosunda aslında elimizde farklı tipte veriler bulunmaktaydı.

Veri çerçeveleri aslında bu farklı veri tiplerini bir arada toplayabilme kabiliyetine sahiptir. 

Genel olarak veri çerçeveleri, farklı veri tiplerine sahip vektörlerden oluşmuştur. Kullandığımız vektörlerin uzunluklarının aynı olması gerekldir. Gelin şimdi @sec-vektorler'de işlediğimiz @tbl-bitkiler versini veri çerçevesine çevirelim.

Hatırlarsanız öncelikle vektörler tanımlamıştık.

```r
bitki_ismi <- c("bitki1", "bitki2", "bitki3", "bitki4", "bitki5", 
                "bitki6", "bitki7","bitki8", "bitki9", "bitki10")

yaprak_uzunlugu <- c(2.3, 3.4, 4.5, 1.2, 3.4, 
                    NA, 1.8, 6.3, 2.1, NA)


deney_kosullari <- factor(c("karanlik", "aydinlik", "aydinlik", "karanlik", "aydinlik",
                            "karanlik", "karanlik", "aydinlik", "karanlik", "karanlik"))
```

Şimdi ise bu vektörleri bir veri çerçevesi içerisinde birleştirelim:

```{r}
veri <- data.frame(bitki_ismi = c("bitki1", "bitki2", 
                                    "bitki3", "bitki4", 
                                    "bitki5", "bitki6", 
                                    "bitki7","bitki8", 
                                    "bitki9", "bitki10"),
                    yaprak_uzunlugu = c(2.3, 3.4, 4.5, 1.2, 3.4, 
                                            NA, 1.8, 6.3, 2.1, NA),
                    deney_kosullari = factor(c("karanlik", "aydinlik", 
                                                    "aydinlik", "karanlik", 
                                                    "aydinlik", "karanlik", 
                                                    "karanlik", "aydinlik", 
                                                    "karanlik", "karanlik"))
)
```

Şimdi gelin `str` fonksiyonu ile oluştruduğumuz veri çerçevesini inceleyelim:

```{r}
str(veri)
```

Dikkat ederseniz her sütun artık farklı bir tipe sahip.

## Veri Çerçevesi boyutları

Elimizdeki veri çerçevesinin boyutlarını aynı matrisler gibi öğrenebiliriz.

```{r}
dim(veri)
```

Satır sayısı:

```{r}
nrow(veri)
```

```{r}
ncol(veri)
```

## Sütun ve satır isimleri

Her veri çerçevesinin bir sütun ismi olması gerekir. Sütun isimlerini `colnames` fonksiyonu ile öğrenebiliriz:

```{r}
colnames(veri)
```

Aynı şekilde, her veri çerçevesinde bir satır ismi de bulunmaktadır. Bunu da `rownames` ile öğrenebiliriz:

```{r}
rownames(veri)
```

İstersek, satır ve sütun isimlerini değiştirebiliriz:

```{r}
colnames(veri) <- c("isim", "uzunluk", "kosul")
rownames(veri) <- c("bitki1", "bitki2", "bitki3", "bitki4", "bitki5", 
                        "bitki6", "bitki7","bitki8", "bitki9", "bitki10")
```

:::{.callout-warning}
## Dikkat!

Satır ve sütun isimleri mutlaka tekil olmalıdır. Yani her satır ismi ve her sütun ismi tek olmalı. Yukarıdaki örnekte, satır isimlerinde iki tane `bitki8` yazma şansımız yoktur. Yoksa hata alırsınız.
:::

Şimdi tekrar veri çerçevesini ekrana yazdıralım:

```{r}
veri
```

Elimizdeki veri çerçeveleri çok uzun olabilir, bu yüzden verinin hepsini ekrana yazdırmak istemeyebiliriz. `head` komutu, bize veri çerçevesinin ilk bir kaç satırını ekrana yazdırma şansı verir:

```{r}
head(veri)
```

## Veri çerçevesi işlemleri

Bir veri çerçevesinde, aynı matris gibi hareket edebiliriz. Mesela ikinci satırın üçüncü sütunundaki veriyi elde edelim:

```{r}
veri[2,3]
```

Şimdi sadece ikinci sütunu elde edelim:

```{r}
veri[,2]
```

Şimdi de üçünücü satırı elde edelim:

```{r}
veri[3,]
```

İstersek sadece sütun isimlerini de kullanabiliriz. Önce sütun isimlerine bakalım:

```{r}
colnames(veri)
```

Sadece yaprak uzunluklarına bakalım:

```{r}
veri$uzunluk
```

Eğer `$` işaretini kullanırsak, doğrudan sütun isimleri ile çalışabiliriz. Bu bize bir vektör geri döndürdü.

Peki, yaprak uzunlukları vektöründeki 5. elemanı elde etmek istesek:

```{r}
veri$uzunluk[5]
```

Bunu şu şekilde de yapabiliriz:

```{r}
veri[5,2]
```

Bu iki işlem de bize aynı sonucu verecektir. Dolayısıyla istediğimiz kullanabiliriz.
